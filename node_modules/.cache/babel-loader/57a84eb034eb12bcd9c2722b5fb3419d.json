{"ast":null,"code":"var _jsxFileName = \"D:\\\\study\\\\my-books\\\\src\\\\pages\\\\Signin.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport { message } from 'antd';\nimport withAuth from '../hocs/withAuth';\nimport '../styles/signin.scss';\n\nclass Signin extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      email: ''\n    };\n    this.passwordRef = React.createRef();\n\n    this.click = async () => {\n      console.log('login', this.state.email, this.passwordRef.current.value); // 이메일과 패스워드를 뽑아서 서버에 보낸다. POST\n      // web api\n      // 무언가를 생성할 때, POST\n      // 무언가를 조회할 때, GET\n      // 무언가를 수정할 때, PATCH\n      // 무언가를 삭제할 때, DELETE\n      // ex) book, auth, user\n      // 서버에다가 내가 허가된 유저인지를 체크하고, 인증 토큰을 받아오는 행위\n      // 유저 테이블\n      // 유저아이디, 유저이메일, 유저패스워드, 유저생성일...\n      // 세션 테이블\n      // 세션아이디, 세션토큰, 세션생성일...\n      // 인증 토큰 브라우저 어딘가에 저장해두고,\n      // 다른 정보를 얻어올때, 나 인증한 유저야 라고 토큰을 함께 보냅니다.\n      // https://api.marktube.tv/v1/me POST {email, password}\n      // {token: ''}\n\n      const email = this.state.email;\n      const password = this.passwordRef.current.value;\n      if (email === '' || password === '') return;\n\n      try {\n        const response = await axios.post('https://api.marktube.tv/v1/me', {\n          email,\n          password\n        }); // 1. 토큰을 저장한다.\n\n        const token = response.data.token;\n        console.log(token);\n        localStorage.setItem('token', token); // 2. 홈으로 이동시킨다.\n\n        this.props.history.push('/');\n      } catch (error) {\n        var _error$response, _error$response$data;\n\n        const errorCode = (error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'NOT_MATCH';\n\n        if (errorCode === 'PASSWORD_NOT_MATCH') {\n          message.error('패스워드가 안맞드라');\n        } else if (errorCode === 'USER_NOT_EXIST') {\n          message.error('없는 이메일이야');\n        } else {\n          message.error('나도 모르는 에러');\n        }\n      }\n    };\n\n    this.change = e => {\n      this.setState({\n        email: e.target.value\n      });\n    };\n  }\n\n  // 한번 만들어지면 객체 인스턴스는 그대로\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"signin\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"signin background\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"signin logo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 11\n      }\n    }, \"logo\"), \"test\"));\n    /*\r\n     <h1 className=\"signin title\">로그인</h1>\r\n        <div className=\"signin login\">\r\n          <input\r\n            type=\"text\"\r\n            value={this.state.email}\r\n            onChange={this.change}\r\n            className=\"signin id\"\r\n          />\r\n          <input\r\n            type=\"password\"\r\n            ref={this.passwordRef}\r\n            className=\"signin password\"\r\n          />\r\n          <button onClick={this.click} className=\"signin loginBtn\">\r\n            로그인\r\n          </button>\r\n        </div>\r\n    */\n  }\n\n}\n\nexport default withAuth(Signin, false);","map":{"version":3,"sources":["D:/study/my-books/src/pages/Signin.js"],"names":["React","axios","message","withAuth","Signin","Component","state","email","passwordRef","createRef","click","console","log","current","value","password","response","post","token","data","localStorage","setItem","props","history","push","error","errorCode","change","e","setState","target","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,MAAxB;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,OAAO,uBAAP;;AAEA,MAAMC,MAAN,SAAqBJ,KAAK,CAACK,SAA3B,CAAqC;AAAA;AAAA;AAAA,SACnCC,KADmC,GAC3B;AACNC,MAAAA,KAAK,EAAE;AADD,KAD2B;AAAA,SAInCC,WAJmC,GAIrBR,KAAK,CAACS,SAAN,EAJqB;;AAAA,SAoCnCC,KApCmC,GAoC3B,YAAY;AAClBC,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqB,KAAKN,KAAL,CAAWC,KAAhC,EAAuC,KAAKC,WAAL,CAAiBK,OAAjB,CAAyBC,KAAhE,EADkB,CAGlB;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;;AAEA,YAAMP,KAAK,GAAG,KAAKD,KAAL,CAAWC,KAAzB;AACA,YAAMQ,QAAQ,GAAG,KAAKP,WAAL,CAAiBK,OAAjB,CAAyBC,KAA1C;AAEA,UAAIP,KAAK,KAAK,EAAV,IAAgBQ,QAAQ,KAAK,EAAjC,EAAqC;;AAErC,UAAI;AACF,cAAMC,QAAQ,GAAG,MAAMf,KAAK,CAACgB,IAAN,CAAW,+BAAX,EAA4C;AACjEV,UAAAA,KADiE;AAEjEQ,UAAAA;AAFiE,SAA5C,CAAvB,CADE,CAKF;;AACA,cAAMG,KAAK,GAAGF,QAAQ,CAACG,IAAT,CAAcD,KAA5B;AACAP,QAAAA,OAAO,CAACC,GAAR,CAAYM,KAAZ;AACAE,QAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BH,KAA9B,EARE,CASF;;AACA,aAAKI,KAAL,CAAWC,OAAX,CAAmBC,IAAnB,CAAwB,GAAxB;AACD,OAXD,CAWE,OAAOC,KAAP,EAAc;AAAA;;AACd,cAAMC,SAAS,GAAG,CAAAD,KAAK,SAAL,IAAAA,KAAK,WAAL,+BAAAA,KAAK,CAAET,QAAP,4FAAiBG,IAAjB,8EAAuBM,KAAvB,KAAgC,WAAlD;;AACA,YAAIC,SAAS,KAAK,oBAAlB,EAAwC;AACtCxB,UAAAA,OAAO,CAACuB,KAAR,CAAc,YAAd;AACD,SAFD,MAEO,IAAIC,SAAS,KAAK,gBAAlB,EAAoC;AACzCxB,UAAAA,OAAO,CAACuB,KAAR,CAAc,UAAd;AACD,SAFM,MAEA;AACLvB,UAAAA,OAAO,CAACuB,KAAR,CAAc,WAAd;AACD;AACF;AACF,KA1FkC;;AAAA,SA4FnCE,MA5FmC,GA4FzBC,CAAD,IAAO;AACd,WAAKC,QAAL,CAAc;AAAEtB,QAAAA,KAAK,EAAEqB,CAAC,CAACE,MAAF,CAAShB;AAAlB,OAAd;AACD,KA9FkC;AAAA;;AAIF;AACjCiB,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,SADF,CADF;AASA;;;;;;;;;;;;;;;;;;;AAmBD;;AAlCkC;;AAiGrC,eAAe5B,QAAQ,CAACC,MAAD,EAAS,KAAT,CAAvB","sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\nimport { message } from 'antd';\r\nimport withAuth from '../hocs/withAuth';\r\nimport '../styles/signin.scss';\r\n\r\nclass Signin extends React.Component {\r\n  state = {\r\n    email: '',\r\n  };\r\n  passwordRef = React.createRef(); // 한번 만들어지면 객체 인스턴스는 그대로\r\n  render() {\r\n    return (\r\n      <div className=\"signin\">\r\n        <div className=\"signin background\">\r\n          <div className=\"signin logo\">logo</div>\r\n          test\r\n        </div>\r\n      </div>\r\n    );\r\n\r\n    /*\r\n     <h1 className=\"signin title\">로그인</h1>\r\n        <div className=\"signin login\">\r\n          <input\r\n            type=\"text\"\r\n            value={this.state.email}\r\n            onChange={this.change}\r\n            className=\"signin id\"\r\n          />\r\n          <input\r\n            type=\"password\"\r\n            ref={this.passwordRef}\r\n            className=\"signin password\"\r\n          />\r\n          <button onClick={this.click} className=\"signin loginBtn\">\r\n            로그인\r\n          </button>\r\n        </div>\r\n    */\r\n  }\r\n\r\n  click = async () => {\r\n    console.log('login', this.state.email, this.passwordRef.current.value);\r\n\r\n    // 이메일과 패스워드를 뽑아서 서버에 보낸다. POST\r\n\r\n    // web api\r\n\r\n    // 무언가를 생성할 때, POST\r\n    // 무언가를 조회할 때, GET\r\n    // 무언가를 수정할 때, PATCH\r\n    // 무언가를 삭제할 때, DELETE\r\n    // ex) book, auth, user\r\n\r\n    // 서버에다가 내가 허가된 유저인지를 체크하고, 인증 토큰을 받아오는 행위\r\n\r\n    // 유저 테이블\r\n    // 유저아이디, 유저이메일, 유저패스워드, 유저생성일...\r\n\r\n    // 세션 테이블\r\n    // 세션아이디, 세션토큰, 세션생성일...\r\n\r\n    // 인증 토큰 브라우저 어딘가에 저장해두고,\r\n\r\n    // 다른 정보를 얻어올때, 나 인증한 유저야 라고 토큰을 함께 보냅니다.\r\n\r\n    // https://api.marktube.tv/v1/me POST {email, password}\r\n    // {token: ''}\r\n\r\n    const email = this.state.email;\r\n    const password = this.passwordRef.current.value;\r\n\r\n    if (email === '' || password === '') return;\r\n\r\n    try {\r\n      const response = await axios.post('https://api.marktube.tv/v1/me', {\r\n        email,\r\n        password,\r\n      });\r\n      // 1. 토큰을 저장한다.\r\n      const token = response.data.token;\r\n      console.log(token);\r\n      localStorage.setItem('token', token);\r\n      // 2. 홈으로 이동시킨다.\r\n      this.props.history.push('/');\r\n    } catch (error) {\r\n      const errorCode = error?.response?.data?.error || 'NOT_MATCH';\r\n      if (errorCode === 'PASSWORD_NOT_MATCH') {\r\n        message.error('패스워드가 안맞드라');\r\n      } else if (errorCode === 'USER_NOT_EXIST') {\r\n        message.error('없는 이메일이야');\r\n      } else {\r\n        message.error('나도 모르는 에러');\r\n      }\r\n    }\r\n  };\r\n\r\n  change = (e) => {\r\n    this.setState({ email: e.target.value });\r\n  };\r\n}\r\n\r\nexport default withAuth(Signin, false);\r\n"]},"metadata":{},"sourceType":"module"}